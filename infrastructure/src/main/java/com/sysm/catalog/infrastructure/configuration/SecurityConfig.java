package com.sysm.catalog.infrastructure.configuration;

import com.nimbusds.jose.shaded.gson.JsonObject;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Profile;
import org.springframework.core.convert.converter.Converter;
import org.springframework.security.authentication.AbstractAuthenticationToken;
import org.springframework.security.config.annotation.method.configuration.EnableMethodSecurity;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.oauth2.jwt.Jwt;
import org.springframework.security.oauth2.jwt.JwtClaimNames;
import org.springframework.security.oauth2.server.resource.authentication.JwtAuthenticationToken;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.web.cors.CorsConfiguration;
import org.springframework.web.cors.CorsConfigurationSource;
import org.springframework.web.cors.UrlBasedCorsConfigurationSource;

import java.util.*;
import java.util.function.Function;
import java.util.stream.Collectors;
import java.util.stream.Stream;

@Configuration
@EnableWebSecurity
@EnableMethodSecurity(securedEnabled = true, jsr250Enabled = true)
@Profile({"!development"}) //run in any profile different of this
public class SecurityConfig {

    private static final String ROLE_ADMIN = "CATALOGO_ADMIN";
    private static final String ROLE_CAST_MEMBERS = "CATALOGO_CAST_MEMBERS";
    private static final String ROLE_CATEGORIES = "CATALOGO_CATEGORIES";
    private static final String ROLE_GENRES = "CATALOGO_GENRES";
    private static final String ROLE_VIDEOS = "CATALOGO_VIDEOS";

    @Bean
    public SecurityFilterChain securityFilterChain(final HttpSecurity http) throws Exception {
        return http
            //Cross Site Request Forgery. Spring check if all post-methods contain the parameter
            //a random ID, generated by its self (spring) and returned.
            //This is for stateful security layer. In MS the frontend is separated
            //Forgery is when a third person makes a post from another site using the cookie authorization
            //from another person and makes a request in their name
            .cors(httpSecurityCorsConfigurer -> corsConfigurationSource())
            .csrf(csrf -> {
                csrf.disable();
            })
            .authorizeHttpRequests(authorize -> {
                authorize
                    .requestMatchers("/cast_members*").hasAnyRole(ROLE_ADMIN, ROLE_CAST_MEMBERS)
                    .requestMatchers("/categories*").hasAnyRole(ROLE_ADMIN, ROLE_CATEGORIES)
                    .requestMatchers("/genres*").hasAnyRole(ROLE_ADMIN, ROLE_GENRES)
                    .requestMatchers("/videos*").hasAnyRole(ROLE_ADMIN, ROLE_VIDEOS)
                    .anyRequest().hasRole(ROLE_ADMIN);
            })
            //Convert o default keycloak JWT to spring JWT format
            .oauth2ResourceServer(oauth -> {
                oauth.jwt(j -> j.jwtAuthenticationConverter(new KeycloakJwtConverter()));
            })
            //Session is stateless
            .sessionManagement(session -> {
                session.sessionCreationPolicy(SessionCreationPolicy.STATELESS);
            })
            //Cookie received needs to be from the same origen
            //The same host where it was created for be used
            .headers(headers -> {
                headers.frameOptions(opt -> opt.sameOrigin());
            })
            .build();
    }

    @Bean
    public CorsConfigurationSource corsConfigurationSource() {
        CorsConfiguration config = new CorsConfiguration();

        // Allow all origins or specify your front-end URL here
        config.setAllowedOrigins(Arrays.asList(
            "http://localhost:3000",            // react
            "http://localhost:4200"             // angular
        ));

        // Allow any method (GET, POST, etc.)
        config.addAllowedMethod("*");

        // Allow any header (like Authorization)
        config.addAllowedHeader("*");

        // Allow credentials (cookies, Authorization headers, etc.)
        config.setAllowCredentials(true);

        UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();
        source.registerCorsConfiguration("/**", config);

        return source;
    }

    static class KeycloakJwtConverter implements Converter<Jwt, AbstractAuthenticationToken> {
        //Class to convert the Keycloak JWT format to Spring JWT format

        private final KeycloakAuthoritiesConverter authoritiesConverter;

        public KeycloakJwtConverter() {
            this.authoritiesConverter = new KeycloakAuthoritiesConverter();
        }

        @Override
        public AbstractAuthenticationToken convert(final Jwt jwt) {
            return new JwtAuthenticationToken(jwt, extractAuthorities(jwt), extractPrincipal(jwt));
        }

        private String extractPrincipal(final Jwt jwt) {
            return jwt.getClaimAsString(JwtClaimNames.SUB);
        }

        private Collection<? extends GrantedAuthority> extractAuthorities(final Jwt jwt) {
            return this.authoritiesConverter.convert(jwt);
        }
    }

    static class KeycloakAuthoritiesConverter implements Converter<Jwt, Collection<GrantedAuthority>> {
        //class to convert the Keycloak authorities format to Spring authorities format

        private static final String REALM_ACCESS = "realm_access";
        private static final String ROLES = "roles";
        private static final String RESOURCE_ACCESS = "resource_access";
        private static final String SEPARATOR = "_";
        private static final String ROLE_PREFIX = "ROLE_";

        @Override
        public Collection<GrantedAuthority> convert(final Jwt jwt) {
            final var realmRoles = extractRealmRoles(jwt);
            final var resourceRoles = extractResourceRoles(jwt);

            return Stream.concat(realmRoles, resourceRoles)
                .map(role -> new SimpleGrantedAuthority(ROLE_PREFIX + role.toUpperCase()))
                .collect(Collectors.toSet());
        }

        private Stream<String> extractResourceRoles(final Jwt jwt) {
            //Extract the client roles
            final Function<Map.Entry<String, Object>, Stream<String>> mapResource =
                resource -> {
                    final var key = resource.getKey();
                    final var value = (JsonObject) resource.getValue();
                    final var roles = (Collection<String>) value.get(ROLES);
                    return roles.stream().map(role -> key.concat(SEPARATOR).concat(role));
                };

            final Function<Set<Map.Entry<String, Object>>, Collection<String>> mapResources =
                resources -> resources.stream()
                    .flatMap(mapResource)
                    .toList();

            return Optional.ofNullable(jwt.getClaimAsMap(RESOURCE_ACCESS))
                .map(resources -> resources.entrySet())
                .map(mapResources)
                .orElse(Collections.emptyList())
                .stream();
        }

        private Stream<String> extractRealmRoles(final Jwt jwt) {
            //Extract the realm roles
            return Optional.ofNullable(jwt.getClaimAsMap(REALM_ACCESS))
                .map(resource -> (Collection<String>) resource.get(ROLES))
                .orElse(Collections.emptyList())
                .stream();
        }
    }
}
