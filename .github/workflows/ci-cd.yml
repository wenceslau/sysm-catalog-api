name: CI Pipeline

# Pipeline trigger
on:
  # The pipeline will run whenever there is a push to the main or master branches
  push:
    branches:
      - main
      - master
  # Enable manual trigger through the GitHub Actions interface
  workflow_dispatch:

env:
  IMAGE_NAME: wbaneto/sysm-catalog-api

jobs:
  # Test execution job
  tests:
    name: Tests runner
    runs-on: ubuntu-latest
    # Steps configuration of our job
    steps:
      # 1. The actions/checkout@v3 step checks out your repository code so your workflow can access it.
      - uses: actions/checkout@v3

      # 2. Configure the JDK on the machine. It is used to set up Java JDK. Version 17 is used.
      - name: Set up JDK@17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'adopt'

        # 3. Configure Cache Maven packages. It is used to cache dependencies and build outputs to improve workflow execution time.
      - name: Cache Maven packages
        uses: actions/cache@v2
        with:
          path: ~/.m2                                               # path: This sets the path of the directory you want to cache. In the context of a Maven project, ~/.m2 refers to the local Maven repository which is stored in the user's home directory. This is where all the project dependencies are downloaded to. By caching this directory, the build times can be significantly reduced as the dependencies don't need to be re-downloaded with every build.
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}   # key: The cache key is a unique identifier for the cache. GitHub Actions uses the key to save or restore a cache. In this case, the cache key is created using the runner's OS (${{ runner.os }}) and -m2- followed by a hash of all pom.xml files (${{ hashFiles('**/pom.xml') }}). This hash function ensures that if any of the pom.xml files are changed (indicating that possibly the dependencies have changed) a new cache key will be generated and a new cache will be created.
          restore-keys: ${{ runner.os }}-m2                         # restore-keys: The restore-keys option provides a list of keys to use when the key doesn't hit an existing cache key. If there are no matches with the key, the action will search for keys in restore-keys. In this case, it will fallback to the cache key for the runner's OS ${{ runner.os }}-m2. This can improve performance by restoring a partial cache when the dependencies in pom.xml files change.

      # 3. Check if Maven is installed
      - name: Run the Maven verify phase
        run: mvn --batch-mode --update-snapshots verify

      # 4. Build the application with Maven. The -B option in maven command is for batch mode, making the build output less verbose.
      - name: Build with Maven
        run: mvn -B package --file pom.xml

      # 5. Run the application tests. The -B option in maven command is for batch mode, making the build output less verbose.
      - name: Run application tests with Maven
        run: mvn -B test --file ./pom.xml

  # Job para buildar a aplicação
  build:
    name: Build runner
    needs: tests
    runs-on: ubuntu-latest
    # Configuração de passos do nosso job
    steps:
      # 1. The actions/checkout@v3 step checks out your repository code so your workflow can access it.
      - uses: actions/checkout@v3

      # 2. Configure the JDK on the machine. It is used to set up Java JDK. Version 17 is used.
      - name: Set up JDK@17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'adopt'

      # 3. Check if Maven is installed
      - name: Run the Maven verify phase
        run: mvn --batch-mode --update-snapshots verify

      # 4. Build the application with Maven. The -B option in maven command is for batch mode, making the build output less verbose.
      - name: Build with Maven
        run: mvn -B package -DskipTests --file pom.xml

      # 6. Set the variable branch name
      - name: Set BUILD_TAG
        run: |
          echo BUILD_TAG=$(echo ${{ github.head_ref || github.ref_name }} | sed "s,/,_,g")-${{ github.run_number }} >> $GITHUB_ENV

      # 7. Print BUILD_TAG
      - name: Print BUILD_TAG defined
        run: |
          echo "Branch: ${{ github.head_ref || github.ref_name }}"
          echo "Run number: ${{ github.run_number }}"
          echo "Tag: ${{ env.BUILD_TAG }}"

      # 8. Log in to DockerHub
      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USR }}
          password: ${{ secrets.DOCKER_HUB_PWD }}

      # 9. Build & Deploy the image
      - name: Build and push the docker image
        uses: docker/build-push-action@v3
        with:
          context: .                                        # The path to the Dockerfile and the context of the build. The context is the root directory of the build. It is used to resolve the paths of the files that are used in the Dockerfile. In this case, the context is set to the root directory of the repository.
          push: true                                        # push: This is a boolean value that specifies whether to push the built image to the container registry. In this case, it is set to true, which means that the image will be pushed to the container registry.
          build-args: VERSION=${{ env.BUILD_TAG }}          # build-args: This is a list of build arguments that are passed to the Docker build. In this case, the VERSION build argument is set to the value of the BUILD_TAG environment variable. This is used to tag the image with the version number.
          tags: ${{ env.IMAGE_NAME }}:${{ env.BUILD_TAG }}  # tags: This is a list of tags that are applied to the built image. In this case, the image is tagged with the IMAGE_NAME environment variable and the BUILD_TAG environment variable. The IMAGE_NAME environment variable is set to wbaneto/sysm-admin-catalogo-de-videos-java, and the BUILD_TAG environment variable is set to the branch name and the run number.
